('Examples', 4)
('a', 24)
('the', 23)
('API.', 3)
('built', 1)
('on', 6)
('concept', 1)
('distributed', 5)
('datasets,', 1)
('which', 3)
('contain', 1)
('arbitrary', 1)
('or', 1)
('You', 1)
('create', 1)
('dataset', 4)
('from', 2)
('data,', 1)
('then', 2)
('apply', 1)
('to', 13)
('building', 2)
('API', 7)
('its', 1)
('RDD', 5)
('In', 7)
('API,', 2)
('types', 1)
('transformations,', 1)
('define', 1)
('previous', 1)
('and', 14)
('off', 1)
('cluster.', 1)
('On', 1)
('top', 1)
('Sparkâ€™s', 4)
('level', 3)
('provided,', 1)
('DataFrame', 8)
('Learning', 3)
('conduct', 1)
('data', 3)
('will', 2)
('show', 2)
('well', 1)
('Word', 1)
('few', 1)
('build', 1)
('Int)', 1)
('called', 1)
('it', 1)
('Scala', 7)
('sc.textFile("hdfs://...")', 2)
('line:', 1)
('\\', 9)
('.map(lambda', 1)
('.reduceByKey(lambda', 1)
('a,', 1)
('+', 2)
('b)', 1)
('counts.saveAsTextFile("hdfs://...")', 1)
('Pi', 1)
('Estimation', 1)
('can', 2)
('also', 2)
('be', 3)
('for', 7)
('compute-intensive', 1)
('tasks.', 1)
('This', 1)
('code', 1)
('by', 4)
('"throwing', 1)
('circle.', 2)
('We', 2)
('pick', 1)
('random', 1)
('unit', 2)
('0)', 1)
('see', 1)
('how', 1)
('many', 2)
('should', 1)
('/', 2)
('so', 1)
('get', 1)
('our', 1)
('def', 1)
('random.random()', 1)
('return', 1)
('x*x', 1)
('y*y', 1)
('<', 1)
('NUM_SAMPLES))', 1)
('roughly', 1)
('%f"', 1)
('%', 1)
('NUM_SAMPLES)', 1)
('organized', 1)
('various', 1)
('relational', 1)
('sources', 1)
('built-in', 2)
('without', 1)
('processing', 1)
('Also,', 1)
('automatically', 1)
('optimizer,', 1)
('Text', 1)
('Search', 1)
('through', 1)
('error', 1)
('log', 1)
('textFile', 1)
('Creates', 2)
('having', 1)
('"line"', 1)
('textFile.map(lambda', 1)
('Row(r)).toDF(["line"])', 1)
('df.filter(col("line").like("%ERROR%"))', 1)
('all', 1)
('MySQL', 4)
('errors.filter(col("line").like("%MySQL%")).count()', 1)
('Fetches', 1)
('strings', 1)
('Simple', 1)
('Data', 1)
('Operations', 1)
('table', 4)
('number', 2)
('people', 2)
('every', 1)
('calculated', 1)
('A', 1)
('example', 1)
('has', 1)
('.read', 1)
('.format("jdbc")', 1)
('.option("dbtable",', 1)
('"people")', 1)
('.load()', 1)
('df.printSchema()', 1)
('age', 1)
('df.groupBy("age").count()', 1)
('Saves', 1)
('JSON', 1)
('format.', 1)
('countsByAge.write.format("json").save("s3a://...")', 1)
('(ML)', 1)
('ML', 2)
('cover', 1)
('such', 2)
('clustering,', 1)
('more.', 1)
('workflows,', 1)
('tuning', 1)
('saving', 1)
('Prediction', 1)
('with', 2)
('Regression', 2)
('vectors.', 1)
('learn', 1)
('vectors', 1)
('contains', 1)
('label', 1)
('features', 1)
('represented', 1)
('sqlContext.createDataFrame(data,', 1)
('"features"])', 1)
('parameters', 1)
('Here,', 1)
('limit', 1)
('10.', 1)
('LogisticRegression(maxIter=10)', 1)
('Fit', 1)
('Given', 1)
('dataset,', 1)
('each', 1)
('Additional', 1)
('Many', 1)
('Spark:', 2)
('examples,', 3)
('Streaming:', 1)
